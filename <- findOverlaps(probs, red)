aggregate-methods          package:S4Vectors           R Documentation

_C_o_m_p_u_t_e _s_u_m_m_a_r_y _s_t_a_t_i_s_t_i_c_s _o_f _s_u_b_s_e_t_s _o_f _v_e_c_t_o_r-_l_i_k_e _o_b_j_e_c_t_s

_D_e_s_c_r_i_p_t_i_o_n:

     The ‘S4Vectors’ package defines ‘aggregate’ methods for Vector,
     Rle, and List objects.

_U_s_a_g_e:

     ## S4 method for signature 'Vector'
     aggregate(x, by, FUN, start=NULL, end=NULL, width=NULL,
               frequency=NULL, delta=NULL, ..., simplify=TRUE)
     
     ## S4 method for signature 'Rle'
     aggregate(x, by, FUN, start=NULL, end=NULL, width=NULL,
               frequency=NULL, delta=NULL, ..., simplify=TRUE)
     
     ## S4 method for signature 'List'
     aggregate(x, by, FUN, start=NULL, end=NULL, width=NULL,
               frequency=NULL, delta=NULL, ..., simplify=TRUE)
     
_A_r_g_u_m_e_n_t_s:

       x: A Vector, Rle, or List object.

      by: An object with ‘start’, ‘end’, and ‘width’ methods.

          If ‘x’ is a List object, the ‘by’ parameter can be a
          IntegerRangesList object to aggregate within the list
          elements rather than across them. When ‘by’ is a
          IntegerRangesList object, the output is either a
          SimpleAtomicList object, if possible, or a SimpleList object,
          if not.

     FUN: The function, found via ‘match.fun’, to be applied to each
          subset of ‘x’.

start, end, width: The start, end, and width of the subsets. If ‘by’ is
          missing, then two of the three must be supplied and have the
          same length.

frequency, delta: Optional arguments that specify the sampling
          frequency and increment within the subsets (in the same
          fashion as ‘window’ from the ‘stats’ package does).

     ...: Optional arguments to ‘FUN’.

simplify: A logical value specifying whether the result should be
          simplified to a vector or matrix if possible.

_D_e_t_a_i_l_s:

     Subsets of ‘x’ can be specified either via the ‘by’ argument or
     via the ‘start’, ‘end’, ‘width’, ‘frequency’, and ‘delta’
     arguments.

     For example, if ‘start’ and ‘end’ are specified, then:
     
     
       aggregate(x, FUN=FUN, start=start, end=end, ..., simplify=simplify)

     is equivalent to:
     
     
       sapply(seq_along(start),
              function(i) FUN(x[start[i]:end[i]], ...), simplify=simplify)

     (replace ‘x[start[i]:end[i]]’ with 2D-style subsetting
     ‘x[start[i]:end[i], ]’ if ‘x’ is a DataFrame object).

_S_e_e _A_l_s_o:

        • The ‘aggregate’ function in the ‘stats’ package.

        • Vector, Rle, List, and DataFrame objects.

        • The ‘start’, ‘end’, and ‘width’ generic functions defined in
          the ‘BiocGenerics’ package.

_E_x_a_m_p_l_e_s:

     x <- Rle(10:2, 1:9)
     aggregate(x, x > 4, mean)
     aggregate(x, FUN=mean, start=1:26, width=20)
     
     ## Note that aggregate() works on a DataFrame object the same way it
     ## works on an ordinary data frame:
     aggregate(DataFrame(state.x77), list(Region=state.region), mean)
     aggregate(weight ~ feed, data=DataFrame(chickwts), mean)
     
     library(IRanges)
     by <- IRanges(start=1:26, width=20, names=LETTERS)
     aggregate(x, by, is.unsorted)
     

